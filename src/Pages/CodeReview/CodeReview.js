import '../Foundation/Foundation.css'
import './CodeReview.css';
import { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate, useLocation } from 'react-router-dom';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import chat_data from './chat.json'
import codereview_data from './codereview.json'

function CodeReview() {
  const location = useLocation();
  const lecture_name = location.state?.lecture_name || 'Í∞ïÏùòÎ™Ö ÏóÜÏùå';

  let [hw_name, change_hw_name] = useState('Ïã§Ïäµ Í≥ºÏ†ú2');
  let [hw_problem, change_hw_problem] = useState('Î∞ëÎ≥ÄÍ≥º ÎÜíÏù¥ ÌïÑÎìúÎ•º Í∞ÄÏßÄÎäî ÏÇºÍ∞ÅÌòï ÌÅ¥ÎûòÏä§Î•º ÏûëÏÑ±ÌïòÍ≥†, Îëê ÏÇºÍ∞ÅÌòïÏùò Î∞ëÎ≥ÄÍ≥º ÎÜíÏù¥Î•º ÏûÖÎ†• Î∞õÏïÑ ÎÑìÏù¥Î•º ÎπÑÍµêÌïòÏãúÏò§.')
  let [hw_test1, change_hw_test1] = useState(''); // ÏûÖÎ†• ÏòàÏ†ú1
  let [hw_test2, change_hw_test2] = useState(''); // ÏûÖÎ†• ÏòàÏ†ú2
  let [hw_test3, change_hw_test3] = useState(''); // ÏûÖÎ†• ÏòàÏ†ú3
  let [hw_test4, change_hw_test4] = useState(''); // ÏûÖÎ†• ÏòàÏ†ú4
  let [hw_test5, change_hw_test5] = useState(''); // ÏûÖÎ†• ÏòàÏ†ú5
  let [hw_test_answer1, change_hw_test_answer1] = useState(''); // Ï∂úÎ†• ÏòàÏ†ú1
  let [hw_test_answer2, change_hw_test_answer2] = useState(''); // Ï∂úÎ†• ÏòàÏ†ú2
  let [hw_test_answer3, change_hw_test_answer3] = useState(''); // Ï∂úÎ†• ÏòàÏ†ú3
  let [hw_test_answer4, change_hw_test_answer4] = useState(''); // Ï∂úÎ†• ÏòàÏ†ú4
  let [hw_test_answer5, change_hw_test_answer5] = useState(''); // Ï∂úÎ†• ÏòàÏ†ú5
  let [source, change_source] = useState('printf("Hello World!");');
  let [gpt_feedback, change_gpt_feedback] = useState('GPTÍ∞Ä ÏûëÏÑ±Ìïú ÌîºÎìúÎ∞± ÎÇ¥Ïö©');
  let [userName, changeUserName] = useState('Ïù¥ÏòÅÌù¨');
  let [cData, change_cData] = useState([]);


  const fetchData = () => {
    // GET ÏöîÏ≤≠ Î≥¥ÎÇ¥Í∏∞
    axios.get(`/ÏΩîÎìúÎ¶¨Î∑∞Ï£ºÏÜå`)
      .then((response) => {
        // ÏöîÏ≤≠ ÏÑ±Í≥µ Ïãú Ïã§ÌñâÎêòÎäî ÏΩîÎìú
        // changeLecture(response.data.lecture_name);
        change_hw_name(response.data.hw_name);
        change_hw_problem(response.data.problem);
        change_hw_test1(response.data.test1);
        change_hw_test2(response.data.test2);
        change_hw_test3(response.data.test3);
        change_hw_test4(response.data.test4);
        change_hw_test5(response.data.test5);
        change_hw_test_answer1(response.data.test_answer1);
        change_hw_test_answer2(response.data.test_answer2);
        change_hw_test_answer3(response.data.test_answer3);
        change_hw_test_answer4(response.data.test_answer4);
        change_hw_test_answer5(response.data.test_answer5);
        change_source(response.data.source);
        change_gpt_feedback(response.data.gpt_feedback);
        change_cData(response.chat);
      })
      .catch(error => {
        // ÏöîÏ≤≠ Ïã§Ìå® Ïãú Ïã§ÌñâÎêòÎäî ÏΩîÎìú
        change_hw_name('Ïã§Ïäµ Í≥ºÏ†ú2(ÏöîÏ≤≠Ïã§Ìå®)');
        change_hw_name(codereview_data.hw[0].hw_name);
        change_hw_problem(codereview_data.hw[0].hw_problem);
        change_hw_test1(codereview_data.hw[0].hw_test1);
        change_hw_test2(codereview_data.hw[0].hw_test2);
        change_hw_test3(codereview_data.hw[0].hw_test3);
        change_hw_test4(codereview_data.hw[0].hw_test4);
        change_hw_test5(codereview_data.hw[0].hw_test5);
        change_hw_test_answer1(codereview_data.hw[0].hw_test_answer1);
        change_hw_test_answer2(codereview_data.hw[0].hw_test_answer2);
        change_hw_test_answer3(codereview_data.hw[0].hw_test_answer3);
        change_hw_test_answer4(codereview_data.hw[0].hw_test_answer4);
        change_hw_test_answer5(codereview_data.hw[0].hw_test_answer5);
        change_source(
          `import java.util.Scanner;

public class Practice {
  public static void main() {
    Scanner oInDev = new Scanner(System.in); // Ïä§Ï∫êÎÑà ÏÑ†Ïñ∏
    int iOut;

    System.out.println("Í∞íÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî");
    iOut = oInDev.nextInt();
    iOut = iOut * iOut + 1;
    System.out.println("Í≥ÑÏÇ∞ Í∞í: " + iOut);
  }
}`);
        change_gpt_feedback(
          `1. Ï£ºÏÑù Ï∂îÍ∞Ä: ÏΩîÎìúÎ•º Ïù¥Ìï¥ÌïòÍ∏∞ ÏâΩÎèÑÎ°ù Ï£ºÏÑùÏùÑ Ï∂îÍ∞ÄÌïòÎäî Í≤ÉÏù¥ Ï¢ãÏäµÎãàÎã§. ÌäπÌûà ÌÅ¥ÎûòÏä§ÏôÄ Î©îÏÑúÎìúÏùò Ïó≠Ìï†, Î≥ÄÏàòÏùò Ïö©ÎèÑ Îì±ÏùÑ ÏÑ§Î™ÖÌïòÎäî Ï£ºÏÑùÏùÄ Ïú†Ïö©Ìï©ÎãàÎã§.
          2. ÏûÖÎ†• Ïò§Î•ò Ï≤òÎ¶¨: ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûòÎ™ªÎêú ÏûÖÎ†•ÏùÑ Ìï† Í≤ΩÏö∞ ÌîÑÎ°úÍ∑∏Îû®Ïù¥ Ïò§Î•ò ÏóÜÏù¥ Í≥ÑÏÜç Ïã§ÌñâÎêòÏßÄÎßå ÏòàÏô∏ Ï≤òÎ¶¨Î•º Ï∂îÍ∞ÄÌïòÏó¨ Ïù¥Î•º Î∞©ÏßÄÌï† Ïàò ÏûàÏäµÎãàÎã§.
          (ÏöîÏ≤≠Ïã§Ìå®)`)
        changeUserName('Ïù¥ÏòÅÌù¨(ÏöîÏ≤≠Ïã§Ìå®)');
        change_cData(cData);
      });
  }

  useEffect(() => {
    // ÌéòÏù¥ÏßÄÍ∞Ä Î°úÎî©Îê† Îïå Îç∞Ïù¥ÌÑ∞Î•º Î∞õÏïÑÏò§Îäî Ìï®Ïàò Ìò∏Ï∂ú
    fetchData();
  }, []); // Îπà Î∞∞Ïó¥ÏùÑ Ï†ÑÎã¨ÌïòÏó¨ Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä ÎßàÏö¥Ìä∏Îê† Îïå Ìïú Î≤àÎßå Ïã§Ìñâ

  const navigate = useNavigate();
  const handleSiteName = () => {
    navigate('/Main');
  }

  return (
    <div className="Foundation">
      <div className='topCover'>
        <div className='siteName'>
          <button className='siteName_button' onClick={handleSiteName}>
            ‚úî Checkoders
            {/* Ïò®ÌÅ¥Î¶≠ÌïòÎ©¥ Î©îÏù∏ÌéòÏù¥ÏßÄ */}
          </button>
        </div>
        <div className='midBlank'>

        </div>
        <div className='logOut'>
          <button className='logOut_button' >
            Logoutüîì
            {/* Ïò®ÌÅ¥Î¶≠ÌïòÎ©¥ Î°úÍ∑∏ÏïÑÏõÉ ÌõÑ Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄ */}
          </button>
        </div>
      </div>
      <div className='bottomBox'>
        <div className='leftBlank'></div>
        <div className='midCore'>
          <div className='lecture'>
            üìñ {lecture_name}
          </div>
          <div className='mainContent'>
            <div className='tabCover'>

            </div>
            <div className='assignInfo'>
              <div className='problemContent'>
                <div className='contentArea'>
                  <div className='contentCover'>
                    Î¨∏Ï†ú ÎÇ¥Ïö©
                  </div>
                  <div className='contentExplanation'>
                    <p>{hw_name}</p>
                    <p>{hw_problem}</p>
                    <div className='CodeReviewIOExample'>
                      <div className='CodeReviewInputExample' style={{ whiteSpace: 'pre-line' }}>
                        <p>ÏûÖÎ†• ÏòàÏ†ú</p>
                        <p>
                          {hw_test1}<br />
                          {hw_test2}<br />
                          {hw_test3}<br />
                          {hw_test4}<br />
                          {hw_test5}
                        </p>
                      </div>
                      <div className='CodeReviewOutputExample' style={{ whiteSpace: 'pre-line' }}>
                        <p>Ï∂úÎ†• ÏòàÏ†ú</p>
                        <p>
                          {hw_test_answer1}<br />
                          {hw_test_answer2}<br />
                          {hw_test_answer3}<br />
                          {hw_test_answer4}<br />
                          {hw_test_answer5}
                        </p>
                      </div>
                    </div>
                  </div>

                </div>
                <div className='contentCode'>
                  <div className='codeCover'>
                    Ï†úÏ∂ú ÏΩîÎìú
                  </div>
                  <div className='codeResponse'>
                    <SyntaxHighlighter language="java">
                      {source}
                    </SyntaxHighlighter>
                  </div>
                </div>
              </div>
              <div className='feedback'>
                <div className='gptFeedback'>
                  <div className='gptCover'>GPT Feedback</div>
                  <div className='gptContent' style={{ whiteSpace: 'pre-line' }}>{gpt_feedback}</div>
                </div>
                <div className='teamFeedback'>
                  <div className='feedCover'>Comment</div>
                  <div className='feedContent'>
                    <div className='comments'>
                      <div className='one_comment'>
                        <ul>
                          {chat_data.map((item, index) => (
                            <li key={index}>
                              <p>{item.name}</p>
                              <p>{item.comment}</p>
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                    <div className='addComment'>
                      <div className='userName'>
                        {userName}
                      </div>
                      <div className='inputTextBox'>
                        <textarea className='textBox' placeholder='ÎåìÍ∏ÄÏùÑ ÎÇ®Í≤®Î≥¥ÏÑ∏Ïöî'></textarea>
                      </div>
                      <div className='buttonArea'>
                        <button className='postButton'>
                          Îì±Î°ù
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div className='rightBlank'></div>
      </div>
    </div>
  );
}

export default CodeReview;
